diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/core/OEntityKey.java src/main/java/org/odata4j/core/OEntityKey.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/core/OEntityKey.java	2011-11-29 00:21:37.000000000 +0000
+++ src/main/java/org/odata4j/core/OEntityKey.java	2012-01-10 13:37:54.000000000 +0000
@@ -126,7 +126,10 @@
    * @param keyString  a standard key-string
    * @return a newly-created entity-key
    */
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
   public static OEntityKey parse(String keyString) {
+*/public static OEntityKey parse(String keyString, String... names) {
+/*--------------------------------------------------------------------------*/
 
     if (keyString == null)
       throw new IllegalArgumentException("keyString cannot be null");
@@ -143,8 +146,12 @@
 
     String[] tokens = tokens(keyString, ',');
     List<Object> values = new ArrayList<Object>(tokens.length);
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
     for (String token : tokens) {
       String[] nv = tokens(token, '=');
+*/  for (int i = 0; i < tokens.length; i++) {
+      String[] nv = tokens(tokens[i], '=');
+/*--------------------------------------------------------------------------*/
       if (nv.length != 1 && nv.length != 2)
         throw new IllegalArgumentException("bad keyString: " + keyString);
       String valueString = nv.length == 1 ? nv[0] : nv[1];
@@ -152,7 +159,15 @@
         CommonExpression expr = ExpressionParser.parse(valueString);
         LiteralExpression literal = (LiteralExpression) expr;
         Object value = Expression.literalValue(literal);
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+        if (nv.length == 1 && names != null && i < names.length) {
+        values.add(NamedValues.create(names[i], value));
+        } else {
+/*--------------------------------------------------------------------------*/
         values.add(nv.length == 1 ? value : NamedValues.create(nv[0], value));
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+        }
+/*--------------------------------------------------------------------------*/
       } catch (Exception e) {
         throw new IllegalArgumentException(String.format("bad valueString [%s] as part of keyString [%s]", valueString, keyString), e);
       }
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/core/OSimpleObjects.java src/main/java/org/odata4j/core/OSimpleObjects.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/core/OSimpleObjects.java	2011-12-13 12:58:56.000000000 +0000
+++ src/main/java/org/odata4j/core/OSimpleObjects.java	2012-01-10 13:37:54.000000000 +0000
@@ -8,8 +8,13 @@
 import org.odata4j.edm.EdmSimpleType;
 import org.odata4j.internal.InternalUtil;
 import org.odata4j.internal.TypeConverter;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
 import org.odata4j.repack.org.apache.commons.codec.binary.Base64;
 import org.odata4j.repack.org.apache.commons.codec.binary.Hex;
+*/
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.codec.binary.Hex;
+/*--------------------------------------------------------------------------*/
 
 /**
  * A static factory to create immutable {@link OSimpleObject} instances.
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/ExpressionParser.java src/main/java/org/odata4j/expression/ExpressionParser.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/ExpressionParser.java	2011-12-22 02:03:59.000000000 +0000
+++ src/main/java/org/odata4j/expression/ExpressionParser.java	2012-01-10 13:37:54.000000000 +0000
@@ -16,8 +16,13 @@
 import org.odata4j.core.Guid;
 import org.odata4j.expression.OrderByExpression.Direction;
 import org.odata4j.internal.InternalUtil;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
 import org.odata4j.repack.org.apache.commons.codec.DecoderException;
 import org.odata4j.repack.org.apache.commons.codec.binary.Hex;
+*/
+import org.apache.commons.codec.DecoderException;
+import org.apache.commons.codec.binary.Hex;
+/*--------------------------------------------------------------------------*/
 
 public class ExpressionParser {
 
@@ -389,7 +394,10 @@
               List<Token> tokensInsideParens = tokens.subList(afterParenIdx, j);
               CommonExpression expressionInsideParens = readExpression(tokensInsideParens);
               if (!(expressionInsideParens instanceof BoolCommonExpression)) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
                 throw new RuntimeException("illegal any predicate");
+*/              expressionInsideParens = Expression.boolParen(expressionInsideParens);
+/*--------------------------------------------------------------------------*/
               }
               CommonExpression any = Expression.aggregate(
                   aggregateFunction,
@@ -580,8 +588,16 @@
     rt = processBinaryExpression(tokens, "or", new Func2<CommonExpression, CommonExpression, CommonExpression>() {
 
       public CommonExpression apply(CommonExpression lhs, CommonExpression rhs) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
         assertType(lhs, BoolCommonExpression.class);
         assertType(rhs, BoolCommonExpression.class);
+*/      if (!(lhs instanceof BoolCommonExpression)) {
+          lhs = Expression.boolParen(lhs);
+        }
+        if (!(rhs instanceof BoolCommonExpression)) {
+          rhs = Expression.boolParen(rhs);
+        }
+/*--------------------------------------------------------------------------*/
         return Expression.or((BoolCommonExpression) lhs, (BoolCommonExpression) rhs);
       }
     });
@@ -593,8 +609,16 @@
     rt = processBinaryExpression(tokens, "and", new Func2<CommonExpression, CommonExpression, CommonExpression>() {
 
       public CommonExpression apply(CommonExpression lhs, CommonExpression rhs) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
         assertType(lhs, BoolCommonExpression.class);
         assertType(rhs, BoolCommonExpression.class);
+*/      if (!(lhs instanceof BoolCommonExpression)) {
+          lhs = Expression.boolParen(lhs);
+        }
+        if (!(rhs instanceof BoolCommonExpression)) {
+          rhs = Expression.boolParen(rhs);
+        }
+/*--------------------------------------------------------------------------*/
         return Expression.and((BoolCommonExpression) lhs, (BoolCommonExpression) rhs);
       }
     });
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/FilterExpressionVisitor.java src/main/java/org/odata4j/expression/FilterExpressionVisitor.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/FilterExpressionVisitor.java	2011-11-29 00:21:37.000000000 +0000
+++ src/main/java/org/odata4j/expression/FilterExpressionVisitor.java	2012-01-10 13:37:54.000000000 +0000
@@ -2,7 +2,11 @@
 
 import org.odata4j.expression.OrderByExpression.Direction;
 import org.odata4j.internal.InternalUtil;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
 import org.odata4j.repack.org.apache.commons.codec.binary.Hex;
+*/
+import org.apache.commons.codec.binary.Hex;
+/*--------------------------------------------------------------------------*/
 
 public class FilterExpressionVisitor implements ExpressionVisitor {
 
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/PrintExpressionVisitor.java src/main/java/org/odata4j/expression/PrintExpressionVisitor.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/expression/PrintExpressionVisitor.java	2011-11-29 00:21:37.000000000 +0000
+++ src/main/java/org/odata4j/expression/PrintExpressionVisitor.java	2012-01-10 13:37:54.000000000 +0000
@@ -2,7 +2,11 @@
 
 import org.odata4j.expression.OrderByExpression.Direction;
 import org.odata4j.internal.InternalUtil;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
 import org.odata4j.repack.org.apache.commons.codec.binary.Hex;
+*/
+import org.apache.commons.codec.binary.Hex;
+/*--------------------------------------------------------------------------*/
 
 public class PrintExpressionVisitor implements ExpressionVisitor {
 
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/internal/InternalUtil.java src/main/java/org/odata4j/internal/InternalUtil.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/internal/InternalUtil.java	2011-12-13 12:58:56.000000000 +0000
+++ src/main/java/org/odata4j/internal/InternalUtil.java	2012-01-10 13:37:54.000000000 +0000
@@ -29,10 +29,12 @@
 import org.odata4j.core.ORelatedEntitiesLinkInline;
 import org.odata4j.core.ORelatedEntityLink;
 import org.odata4j.edm.EdmEntitySet;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
 import org.odata4j.producer.inmemory.BeanModel;
 import org.odata4j.stax2.XMLEventReader2;
 import org.odata4j.stax2.XMLFactoryProvider2;
 import org.odata4j.stax2.XMLInputFactory2;
+\*--------------------------------------------------------------------------*/
 
 public class InternalUtil {
 
@@ -126,11 +128,13 @@
     return dateTime.toString(DATETIME_FORMATTER[idx]);
   }
 
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
   public static XMLEventReader2 newXMLEventReader(Reader reader) {
     XMLInputFactory2 f = XMLFactoryProvider2.getInstance()
         .newXMLInputFactory2();
     return f.createXMLEventReader(reader);
   }
+\*--------------------------------------------------------------------------*/
 
   public static String reflectionToString(final Object obj) {
     StringBuilder rt = new StringBuilder();
@@ -152,6 +156,7 @@
     return rt.toString();
   }
 
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
   @SuppressWarnings("unchecked")
   public static <T> T toEntity(Class<T> entityType, OEntity oe) {
     if (entityType.equals(OEntity.class))
@@ -211,6 +216,7 @@
     }
 
   }
+\*--------------------------------------------------------------------------*/
 
   @SuppressWarnings("unchecked")
   private static <T> Constructor<T> findDefaultDeclaredConstructor(
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/jpa/JPASkipToken.java src/main/java/org/odata4j/producer/jpa/JPASkipToken.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/jpa/JPASkipToken.java	2011-12-22 02:03:59.000000000 +0000
+++ src/main/java/org/odata4j/producer/jpa/JPASkipToken.java	2012-01-10 13:37:54.000000000 +0000
@@ -36,7 +36,10 @@
     return Enumerable.create(values).join(",");
   }
 
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
   public static BoolCommonExpression parse(String primaryKeyName, List<OrderByExpression> orderByList, String skipToken) {
+*/public static BoolCommonExpression parse(String primaryKeyName, List<OrderByExpression> orderByList, String skipToken, String... names) {
+/*--------------------------------------------------------------------------*/
     if (skipToken == null)
       return null;
 
@@ -75,7 +78,10 @@
     }
 
     //  k > kvalue
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
     OEntityKey entityKey = OEntityKey.parse(skipToken.substring(start));
+*/  OEntityKey entityKey = OEntityKey.parse(skipToken.substring(start), names);
+/*--------------------------------------------------------------------------*/
     if (entityKey.getKeyType() == KeyType.SINGLE) {
 
       LiteralExpression entityKeyValue = Expression.literal(entityKey.asSingleValue());
@@ -91,18 +97,27 @@
       // k > keyvalue actually means (k.a > kvalue.a) or (k.a = kvalue.a and k.b > kvalue.b) ...
       List<OProperty<?>> keyProperties = new ArrayList<OProperty<?>>(entityKey.asComplexProperties());
       BoolCommonExpression keyPredicate = null;
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+      String prefix = primaryKeyName != null ? primaryKeyName + "." : "";
+/*--------------------------------------------------------------------------*/
       for (int i = 0; i < keyProperties.size(); i++) {
         OProperty<?> keyProperty = keyProperties.get(i);
         // k.x > kvalue.x
         BoolCommonExpression subPredicate = Expression.gt(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
             Expression.simpleProperty(primaryKeyName + "." + keyProperty.getName()),
+*/          Expression.simpleProperty(prefix + keyProperty.getName()),
+/*--------------------------------------------------------------------------*/
             Expression.literal(keyProperty.getValue()));
 
         for (int j = 0; j < i; j++) {
           OProperty<?> earlierKeyProperty = keyProperties.get(j);
           // k.x = kvalue.x
           BoolCommonExpression eq = Expression.eq(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
               Expression.simpleProperty(primaryKeyName + "." + earlierKeyProperty.getName()),
+*/            Expression.simpleProperty(prefix + earlierKeyProperty.getName()),
+/*--------------------------------------------------------------------------*/
               Expression.literal(earlierKeyProperty.getValue()));
           subPredicate = Expression.and(eq, subPredicate);
         }
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/jpa/JPQLGenerator.java src/main/java/org/odata4j/producer/jpa/JPQLGenerator.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/jpa/JPQLGenerator.java	2011-11-29 00:21:37.000000000 +0000
+++ src/main/java/org/odata4j/producer/jpa/JPQLGenerator.java	2012-01-13 02:14:24.000000000 +0000
@@ -1,6 +1,11 @@
 package org.odata4j.producer.jpa;
 
 import java.sql.Timestamp;
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+import java.util.Collections;
+import java.util.Locale;
+import java.util.Map;
+/*--------------------------------------------------------------------------*/
 
 import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDateTime;
@@ -47,10 +52,21 @@
 
   private final String primaryKeyName;
   private final String tableAlias;
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+  private final Map<String, String> fieldAliases;
+/*--------------------------------------------------------------------------*/
 
   public JPQLGenerator(String primaryKeyName, String tableAlias) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+    this(primaryKeyName, tableAlias, Collections.<String, String>emptyMap());
+  }
+  public JPQLGenerator(String primaryKeyName, String tableAlias, Map<String, String> fieldAliases) {
+/*--------------------------------------------------------------------------*/
     this.primaryKeyName = primaryKeyName;
     this.tableAlias = tableAlias;
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+    this.fieldAliases = fieldAliases;
+/*--------------------------------------------------------------------------*/
   }
 
   public String getPrimaryKeyName() {
@@ -83,13 +99,23 @@
       return toJpql((BoolCommonExpression) expression);
 
     if (expression instanceof EntitySimpleProperty) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
       String field = ((EntitySimpleProperty) expression).getPropertyName();
+*/    String field = ((EntitySimpleProperty) expression).getPropertyName().toUpperCase(Locale.ENGLISH);
+/*--------------------------------------------------------------------------*/
 
       field = field.equals(primaryKeyName)
           ? primaryKeyName
           : field.replace("/", ".");
 
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
       return tableAlias + "." + field;
+*/    String alias = fieldAliases.get(field);
+      if (alias != null) {
+        return alias;
+      }
+      return tableAlias != null ? tableAlias + "." + field : field;
+/*--------------------------------------------------------------------------*/
     }
 
     if (expression instanceof NullLiteral || expression == null)
@@ -139,7 +165,10 @@
       length = length != null ? ", " + length : "";
 
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "SUBSTRING(%s, %s + 1 %s)",
+*/        "SUBSTRING(%s, %s + 1, %s)",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()),
           toJpql(e.getStart()),
           length);
@@ -182,7 +211,10 @@
       ReplaceMethodCallExpression e = (ReplaceMethodCallExpression) expression;
 
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "FUNC('REPLACE', %s, %s, %s)",
+*/        "REPLACE(%s, %s, %s)",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()),
           toJpql(e.getFind()),
           toJpql(e.getReplace()));
@@ -193,7 +225,10 @@
 
       // TODO: don't work while HSQL implementation expecting ROUND(a ,b)
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "FUNC('ROUND', %s)",
+*/        "ROUND(%s)",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()));
     }
 
@@ -271,7 +306,10 @@
       value = value.replace("'", "");
 
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "(CASE WHEN %s LIKE '%%%s%%' THEN TRUE ELSE FALSE END)",
+*/        "%s LIKE '%%%s%%'",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()),
           value);
     }
@@ -283,7 +321,10 @@
       value = value.replace("'", "");
 
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "(CASE WHEN %s LIKE '%%%s' THEN TRUE ELSE FALSE END)",
+*/        "%s LIKE '%%%s'",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()),
           value);
     }
@@ -295,7 +336,10 @@
       value = value.replace("'", "");
 
       return String.format(
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
           "(CASE WHEN %s LIKE '%s%%' THEN TRUE ELSE FALSE END)",
+*/        "%s LIKE '%s%%'",
+/*--------------------------------------------------------------------------*/
           toJpql(e.getTarget()),
           value);
     }
@@ -317,12 +361,18 @@
 
     if (expression instanceof ParenExpression) {
       ParenExpression e = (ParenExpression) expression;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
       return "(" + toJpql((ParenExpression) e.getExpression()) + ")";
+*/    return "(" + toJpql(e.getExpression()) + ")";
+/*--------------------------------------------------------------------------*/
     }
 
     if (expression instanceof BoolParenExpression) {
       BoolParenExpression e = (BoolParenExpression) expression;
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
       return "(" + toJpql((BoolCommonExpression) e.getExpression()) + ")";
+*/    return "(" + toJpql(e.getExpression()) + ")";
+/*--------------------------------------------------------------------------*/
     }
 
     throw new UnsupportedOperationException("unsupported expression " + expression);
diff -rwu ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/resources/OptionsQueryParser.java src/main/java/org/odata4j/producer/resources/OptionsQueryParser.java
--- ../odata4j/odata4j-core/src/main/java/org/odata4j/producer/resources/OptionsQueryParser.java	2011-11-29 00:21:37.000000000 +0000
+++ src/main/java/org/odata4j/producer/resources/OptionsQueryParser.java	2012-01-10 13:37:54.000000000 +0000
@@ -9,6 +9,9 @@
 import org.odata4j.expression.BoolCommonExpression;
 import org.odata4j.expression.CommonExpression;
 import org.odata4j.expression.EntitySimpleProperty;
+/*--------------------------- sisu-odata4j-patch ---------------------------*/
+import org.odata4j.expression.Expression;
+/*--------------------------------------------------------------------------*/
 import org.odata4j.expression.ExpressionParser;
 import org.odata4j.expression.OrderByExpression;
 import org.odata4j.producer.InlineCount;
@@ -39,7 +42,10 @@
     }
     CommonExpression ce = ExpressionParser.parse(filter);
     if (!(ce instanceof BoolCommonExpression)) {
+/*--------------------------- sisu-odata4j-patch ---------------------------*\
       throw new RuntimeException("Bad filter");
+*/    return Expression.boolParen(ce);
+/*--------------------------------------------------------------------------*/
     }
     return (BoolCommonExpression) ce;
   }
